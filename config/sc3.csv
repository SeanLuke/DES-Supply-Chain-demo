#-- FIXME: parts to fill in later

 #      batch.substrateSmall:28. Received 28.0.  Ordered 374, received 0. On order=374, 
 # Sometimes it's OK for "regularly arriving" supplies in InputBuffer to be subtracted from safety.onOrder


# Substrate Contract Negotiation parameters:
# Substrate Contract Negotiation Delay: Unif(7,60) days


#-- need backend processing for
# substrateSmallProd.safety.prepreg,source,prepregProd

#substrateSmallProd,prodStages,2
#substrateSmallProd,delay.1,Triangular,5,7,14
#substrateSmallProd,delay.2,Triangular,5,7,14

# Need to accommodate batch size change in substrate prod/QA (2/1)


# MTO requests (SALP orders substrates, cell prod orders glass...)
#--------------------------------------------------------------


#-- the notional batch size is very large, so that in real life
#-- normally proration will happen, and the actual batch size will be equal to
#-- the order size
#fiberSupplier,batch,10000
#fiberSupplier,transDelay,Triangular,180,270,360


fiber,expiration,+Infinity
#-- FIXME: it is days from receipt, not from manufacturing
resin,expiration,180


#--------- Prepreg production ------------
prepreg,expiration,180

prepregProd.safety.fiber,initial,904
prepregProd.safety.fiber,targetLevel,904
prepregProd.safety.fiber,reorderPoint,452
prepregProd.safety.fiber,delay,Triangular,180,270,360
#prepregProd.safety.fiber,orderExpiration,361


prepregProd.safety.resin,resetExpiration,true
prepregProd.safety.resin,initial,298
prepregProd.safety.resin,targetLevel,298
prepregProd.safety.resin,reorderPoint,149
prepregProd.safety.resin,delay,Triangular,14,21,28
#prepregProd.safety.resin,orderExpiration,29

# (fiber,resin)
prepregProd,inBatch,600*0.041,600*0.027
prepregProd,batch,600
prepregProd,delay,Triangular,14,17,21
prepregProd,qaDelay,Uniform,20,40
prepregProd,qaResetExpiration,true
prepregProd,faulty,0.05

prepregProd,outputDelay,Uniform,5,10
#-- 100% of the output goes to substrateProd.input[0]
prepregProd,output,substrateSmallProd,0,1.0

#----------------------------------
#-- We have 2 parallel production lines, SubstrateSmallProd and
#-- SubstrateLargeProd. They share their input buffers: the latter
#-- makes use of the former's buffers
#--
substrateSmall,expiration,+Infinity
substrateLarge,expiration,+Infinity


substrateSmallProd.safety.prepreg,initial,1836	
substrateSmallProd.safety.prepreg,targetLevel,1836	
substrateSmallProd.safety.prepreg,reorderPoint,918
substrateSmallProd.safety.prepreg,delay,Triangular,60,75,90
#substrateSmallProd.safety.prepreg,orderExpiration,91
substrateSmallProd.safety.prepreg,source,prepregProd

substrateSmallProd.safety.aluminum,mto,1.0
substrateSmallProd.safety.aluminum,delay,Triangular,60,75,90
#substrateSmallProd.safety.aluminum,orderExpiration,91

# (prepreg,aluminum)
substrateSmallProd,orderDelay,Uniform,10,60
substrateSmallProd,inBatch,54*2,9*2
substrateSmallProd,batch,2
#-- we treat the first 3 stages of QA as if they were production stages,
#-- in order to avoid coding multi-stage QA
substrateSmallProd,prodStages,2+3
substrateSmallProd,prodDelay.1,Triangular,5,7,14
substrateSmallProd,prodDelay.2,Triangular,5,7,14
substrateSmallProd,prodDelay.3,Uniform,7,12
substrateSmallProd,prodDelay.4,Uniform,7,12
substrateSmallProd,prodDelay.5,Uniform,7,12
substrateSmallProd,qaUnitLevel,true
substrateSmallProd,qaDelay,Uniform,7,12
substrateSmallProd,faulty,0.05


substrateSmallProd.rework,inBatch,1
substrateSmallProd.rework,batch,1
substrateSmallProd.rework,prodDelay,Uniform,1,14
substrateSmallProd.rework,qaDelay,Uniform,1,50

substrateSmallProd,outputDelay,Uniform,7,14
substrateSmallProd,output,arraySmallAssembly.safety,0,1.0

#--- Substrate, large (SALP)  FIXME: fill it in!
substrateLargeProd,inBatch,432*2,72*2
substrateLargeProd,batch,2
substrateLargeProd,prodStages,3
substrateLargeProd,prodDelay.1,Triangular,10,15,20
substrateLargeProd,prodDelay.2,Triangular,10,15,20
substrateLargeProd,prodDelay.3,Triangular,10,15,20


substrateLargeProd,output,arraySmallAssembly,1,1.0

#--- Solar cell production


#-- Uniform,0,66624
cellProd.safety.cellRM,initial,55520	
cellProd.safety.cellRM,targetLevel,55520	
cellProd.safety.cellRM,reorderPoint,27760
cellProd.safety.cellRM,delay,Triangular,60,84,140
#cellProd.safety.cellRM,orderExpiration,141

#--- Cell Prod; inputs: cellRM
cellProd,orderDelay,Uniform,7,60
cellProd,inBatch,2776
cellProd,batch,2776
cellProd,prodStages,2
cellProd,prodDelay.1,Uniform,7,10
cellProd,prodDelay.2,Triangular,7,14,21
cellProd,outputDelay,Uniform,2,4
cellProd,output,cellAssembly,0,1.0

#---- Solar Cell Assembly; inputs: cell, coverglass
cellAssembly,inBatch,2776,2776
cellAssembly,batch,2776
cellAssembly,prodDelay,Triangular,7,10,14
cellAssembly,transDelay,Uniform,1,2
cellAssembly,qaDelay,Uniform,5,10
cellAssembly,faulty,0.05
cellAssembly,output,cellPackaging,0,1.0
cellAssembly,outputDelay,Uniform,1,2

#---coverglass FIXME
#cellAssembly.safety.coverglass,initial,22224	
#cellAssembly.safety.coverglass,targetLevel,?
#cellAssembly.safety.coverglass,reorderPoint,?
#cellAssembly.safety.coverglass,delay,Triangular,120,180,240
#--- FIXME: coverglass is MTO, not MTS!
#cellAssembly.safety.coverglass,orderExpiration,?


#----- Solar cell packaging

#-- Uniform,0,22224
cellPackaging.safety.cellPM,initial,22224	
cellPackaging.safety.cellPM,targetLevel,11112
cellPackaging.safety.cellPM,reorderPoint,22224
cellPackaging.safety.cellPM,delay,Triangular,30,45,60
#cellPackaging.safety.cellPM,orderExpiration,61

#-- inputs: cell, cellPM
cellPackaging,inBatch,2776,2776
cellPackaging,batch,2776
cellPackaging,prodDelay,Uniform,1,2
cellPackaging,output,arraySmallAssembly,2,1.0
cellPackaging,outputDelay,Uniform,5,10

#-------------------------

arraySmallAssembly.safety.substrateSmall,mto,1.0
arraySmallAssembly.safety.substrateSmall,source,substrateSmallProd

#arraySmallAssembly.safety.substrateLarge,mto,1.0
#arraySmallAssembly.safety.substrateLarge,source,substrateLargeProd

arraySmallAssembly.safety.cell,mto,1.0
arraySmallAssembly.safety.cell,source,cellProd

arraySmallAssembly.safety.adhesive,resetExpiration,true
arraySmallAssembly.safety.adhesive,reorderPoint,50
arraySmallAssembly.safety.adhesive,targetLevel,100
arraySmallAssembly.safety.adhesive,delay,Triangular,90,135,180
#arraySmallAssembly.safety.adhesive,orderExpiration,181

arraySmallAssembly.safety.diode,reorderPoint,1000
arraySmallAssembly.safety.diode,targetLevel,3000
arraySmallAssembly.safety.diode,delay,Triangular,360,450,540
#arraySmallAssembly.safety.diode,orderExpiration,541




# inputs: substrateSmall,substrateLarge,cell,adhesive,diode
arraySmallAssembly,inBatch,1,0,270,0.4,10
arraySmallAssembly,batch,1
arraySmallAssembly,prodStages,6+1
arraySmallAssembly,prodDelay.1,Uniform,1.2,2.3
arraySmallAssembly,prodDelay.2,Uniform,1.2,2.3
arraySmallAssembly,prodDelay.3,Uniform,1.2,2.3
arraySmallAssembly,prodDelay.4,Uniform,1.2,2.3
arraySmallAssembly,prodDelay.5,Uniform,1.2,2.3
arraySmallAssembly,prodDelay.6,Uniform,1.2,23.

# inspection/rework
arraySmallAssembly,prodDelay.7,Uniform,1,3
arraySmallAssembly,qaDelay,Uniform,12,22
arraySmallAssembly,faulty,0.00
arraySmallAssembly,rework,0.10
# arraySmallAssembly,output,?
arraySmallAssembly,outputDelay,Uniform,10,15


arraySmallAssembly.rework,inBatch,1
arraySmallAssembly.rework,batch,1
arraySmallAssembly.rework,prodStages,2
arraySmallAssembly.rework,prodDelay.1,Uniform,1,3
arraySmallAssembly.rework,prodDelay.2,Uniform,1,3
arraySmallAssembly.rework,qaDelay,Uniform,7,22

#=============================

arraySmallCustomer,orderProbability,12/365
arraySmallCustomer,orderSize,EmpiricalWalker,0,0,0,0,0,0,0.25,0,0,0,0.75
arraySmallCustomer,source,arraySmallAssembly
#arraySmallCustomer,orderExpiration,+Infinity

